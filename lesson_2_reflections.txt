Q. What happens when you initialize a repository? Why do you need to do it?

A. Init a repository creates the hidden .git directory.  You need to do it so that you can begin to track changes.

Q. How is the staging area different from the working directory and the repository? What value do you think it offers?

A. the staging area is unique to the git program. it allows you to put files in that you want to track changes to. those files are in the current working dir but don't necessarily have to be part of git.  the value is that you can stage only the files that you want git to keep up with.

Q. How can you use the staging area to make sure you have one commit per logical change?

A. Using the staging area, you can use git status to make sure you've only staged the files involved in the most recent logical change. If you have too many files in the SA, you should remove the extra ones before you commit to ensure you only commit logical changes.

Q. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A. When you want to play around without changing the main part of the code.  Branches would allow you to tinker with the code without actually changing the main project.

Q. How do the diagrams help you visualize the branch structure?

A. They visually represent the linear status of the commits. Geek term alert!  Directed Acyclic Graph (DAG) this means that each successive commit has a direct parent (directed) and that no commit can ever refer back to itself (acyclic).

Q. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A. Merging two branches combines the code changes from both branches into one branch. We represent it in the diagram as a merge of the branches to demonstrate all of the commits that will be in the merged branch as well as to spot any potential abandoned commits that would be lost after the merge.

Q. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

A. Depending on the complexity of the code being merged and the number of files involved, it might be better to manually merge some things. Git's automatic merge function will do the merge and flag the conflicts, but then you have to wade through the conflict code to fix them. Could cause more problems than it avoids.


